git status (to know what all files changes)

git add . 
git commit -m " Your Comment"
git push -u origin branchname

git push -u (Pushing the changes to git hub)


git checkout branchame

git pull 

git --version
ls -a (-a flag used to show hidden directories)
.git contains local repository and staging area and working tree

master is a branch
HEAD is pointer to the first commit in the branch

git symbolic-ref HEAD (checks where the HEAD is pointing to)

git remote add origin [args] (copies the cloned $args to the local directory)

git remote -v (returns URL to remote repo)

echo command writes to standard output

git log --oneline --graph (shows project history as a git tree)

commits are identified by their unique ID (yellow value on command line)

git hash object <file> 

git log --oneline (shows project history shortened)

git show <id> (shows contents of git objects that contain first x characters of id) 
(id can be the id of any object such as a file, a commit, etc...)

to tag something permanently
git tag -a -m "includes feature 1" v0.1
git tag -a -m <message> <tag> (-a means creating an anotated tag, -m is option to specify a tag message)
adds a tag to most recent commit

git tag (shows all tags)
git show <tagName> gives details on the commit 

git branch <name> create a new branch in the local repository

git checkout <branch_or_commit> to checkout a branch or commit

use git checkout -b <branch_name> to create and checkout a new branch

git push --set-upstream origin <branch_name> (no new branch exists)

git remote prune origin (cleans up branches that don't exist locally anymore)

git push origin --delete <remote_branch_name> to delete a remote branch



------------------------------------------------------------------------------------------

Creating a local + remote repo

1. create a local repo
2. git init
3. create remote repo (skip if repo already exists)
4. clone remote repo and git remote add origin [args]
5. make edits to the remote repo with "git push -u origin master" 

------------------------------------------------------------------------------------------

Git Objects
1. Commit object - A small text file that contains information such as commit user information, commit message, and a reference to the commit's parent or parents, and a reference to the root tree of the project
2. Annotated tag - A reference to a specific commit
3. Tree - Directories and filenames in the project
4. Blob - The content of a file in the project 

------------------------------------------------------------------------------------------

Question 2 What does HEAD -> master mean? HEAD is a reference to the current commit.
The content of that commit is in your working tree. master is the name of the branch, and this
commit is the tip of the branch, so this is the master branch label. The arrow represents that
the HEAD reference points to the master branch label, which points to the SHA-1 of the
commit.

------------------------------------------------------------------------------------------

Branches
- All commits belong to a branch
- A branch consists history of all commits starting from the first commit 

create a new branch when you want to experiment on adding something to the master
use command git branch <name> to create a new branch in the local repository
only creates a new branch reference, but still stays on current branch

git checkout <branch> changes head to branch label 
Also updates the working tree with the commit's files

pushing a new local branch to remote repository where branch doesn't exist use command
git push --set-upstream origin <branch_name>

in a case where we delete a branch from local repo, but the branch still exists in remote repo use command : git remote prune origin

------------------------------------------------------------------------------------------

Merges
1. Fast-forward merge
2. Merge commit
3. Squash merge
4. Rebase

Fast-forward merge 
	- Moves the base branch label to the tip of the topic branch
		- Example. Moves master branch label to same commit as topic branch label
		- No changes are made to the topic branch label
		- Only possible if no commits have been made to base branch since branching
	- git checkout master
	- git merge <branch>
		- attempting a fast foward merge is the default
	- git branch -d <branch>


Resolving Merge Conflicts
	1. Checkout master
	2. Merge <branchToMerge>
		a. CONFLICT - Both modified file.txt
	3. Fix file.txt
